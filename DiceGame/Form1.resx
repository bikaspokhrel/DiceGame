<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAS
        dAAAEnQB3mYfeAAABHlJREFUeF7t20FuFFcYReFsjhFsw4JN2BNYBSuy5+CJx4yYMDaDTl5SEfnjr42B
        Furrukc6UnTkVNXzRXK7af74i0PdtYx1PzLW/chY9yNj3Y+MdT8y1v3IWPcjY92PjE/y4uLicH19fbi/
        vz+U38v6nq/v/dpA2/yAjI96dXW1PUY5F9Ym2uoJMh717u5uu2U5N9Y22uw7MtLb29vtVuVcWRtpu0dk
        fODl5eV2i3LurK204REZH1iy0IZHZBy+fv16u2xJYW2mLSHj8ObmZrtsSWFtpi0h47C/5+exNtOWkHFY
        MtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFY
        MtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFY
        MtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFYMtGWkHFY
        MtGWkHFYMtGWkHFYMtGWkHH43Pj48ePh/fv3h7dv3/7t+u/VnhvaEjIOnwOfPn06vHr1iuf7r+tr1tc+
        B3Q+yDhM58WLFzzXY67/Jx2dCzIOU/ny5QvP8yOua6Si80DGYSKfP3/mWX7Gda1EdBbIOExE5/gVE9E5
        IOMwjZ/5mf89E18T6ByQcZjEegWvM5zCtN8OdAbIOEzi5cuXPMMpXNdOQmeAjMMk9PynNAk9P2QcprDe
        zdPzn9Kkdwz1/JBxmMJ6S1fPf0rXPVLQ80PGYQrv3r3j85/SdY8U9PyQcZhC/wBM9PyQcZhCfwRM9PyQ
        cZjChw8f+PyndN0jBT0/ZBwmoec/pUno+SHjMIm+EfQNnQEyDpPoW8Hf0Bkg4zCN/mXQP+gckHGYiM7x
        Kyaic0DGYSKn+DTQv6Z+KkhngYzDVE7xqaDUTwMtdB7IOEznZ14TJP7M/z86F2QcPgfWK/in/Iq4vibt
        1f4xdD7IOHxu9B+GDBmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNt
        CRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNt
        CRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNt
        CRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHJRNtCRmHX79+3S5ZUlibaUvIOLy+vt4uW1JYm2lLyDi8
        uLjYLltSWJtpS8j4wJKFNjwi4wOvrq62S5dzZ22lDY/ISO/u7rZblHNlbaTtHpHxqLe3t9utyrmxttFm
        35HxUS8vL7dblnNhbaKtniDjk3zz5s3h5ubmcH9/vz1G+V2s7/n63q8NtM0PyFj3I2Pdj4x1PzLW/chY
        9yNj3Y+MdT8y1v3IWHfhH4c/AYp5ZReRb516AAAAAElFTkSuQmCC
</value>
  </data>
</root>